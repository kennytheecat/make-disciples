<?php
function create_visitor_section() {
	
	// should check if there is already a page called visitors
	// what if they want to chnage the name?
	 
	 $visitors = get_page_by_title( 'Visitors' );
 
	if ( $visitors == false ) {
		$post_data = array(
			'post_title'    => 'Visitors',
			'post_status'   => 'publish',
			'post_type'     => 'page'
		);
		$wp_id = wp_insert_post( $post_data );		
		
		// create an option, so I can get the visitor page id when needed
		update_option( 'visitor_page_id', $wp_id);
		
	}
	
	
}
add_action( 'init', 'create_visitor_section' );


function create_visitor_section_metabox() {
	$post_id = $_GET['post'] ? $_GET['post'] : $_POST['post_ID'] ;
	$visitor_page_id = get_option('visitor_page_id', true);
// checks for post/page ID
	if ($post_id == $visitor_page_id ) {
		add_meta_box( 'meta-box-id', __( 'My Meta Box', 'textdomain' ), 'wpdocs_my_display_callback', 'page' );
	}
}
add_action( 'add_meta_boxes', 'create_visitor_section_metabox' );

function wpdocs_my_display_callback() {
	$content = 'stuff goes here!';
	echo $content;
}


add_filter( 'wp_nav_menu_items', 'add_visitor_menu_item', 10, 2 );
function add_visitor_menu_item ( $items, $args ) {
	
		if ( $args->menu->taxonomy == 'nav_menu') {
			$items .= '<li class="visitors-nav-menu"><a href="' . esc_url( get_permalink( get_page_by_title( 'Visitors' ) ) ) . '">Visitors</a>';

			$options = get_option( 'mdvp_settings' );

			if ( isset( $options['mdvp_sources'] ) && ! empty( $options['mdvp_sources'] ) ) {
			
				$items .= '<ul>';
				
				if ( in_array('articles', $options['mdvp_sources'] ) ) {
					$items .= '<li><a href="' . esc_url( get_permalink( get_page_by_title( 'Articles' ) ) ) . '">Articles</a><li>';
				}
				
				if ( in_array('podcasts', $options['mdvp_sources'] ) ) {
					$items .= '<li><a href="' . esc_url( get_permalink( get_page_by_title( 'Podcasts' ) ) ) . '">Podcasts</a><li>';
				}

				if ( in_array('videos', $options['mdvp_sources'] ) ) {
					$items .= '<li><a href="' . esc_url( get_permalink( get_page_by_title( 'Videos' ) ) ) . '">Videos</a><li>';
				}
				
							
				$items .= '</ul>';
			}
	
			$items .= '</li>';
    }
    return $items;
}

add_filter( 'the_content', 'visitor_page_content' );
function visitor_page_content( $content ) {
	
	if ( !is_page( 'Visitors' ) )
		return $content;
	
	$first_section = 'Let\'s get gnarly';
	$second_section = 'Let\'s get tubular';
	$third_section = 'Let\'s get radical';
	
	$custom_content = $first_section;
	$custom_content .= $second_section;
	$custom_content .= $content;
	$custom_content .= $third_section;
	
	return $custom_content;
	
}

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class Rational_Meta_Box {
	private $screens = array(
		'post',
		'page',
	);
	private $fields = array(
		array(
			'id' => 'add-image',
			'label' => 'Add Image',
			'type' => 'media',
		),
		array(
			'id' => 'title',
			'label' => 'Title',
			'type' => 'text',
		),
		array(
			'id' => 'link',
			'label' => 'Link',
			'type' => 'url',
		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'admin_footer', array( $this, 'admin_footer' ) );
		add_action( 'save_post', array( $this, 'save_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'advanced-options',
				__( 'Advanced Options', 'rational-metabox' ),
				array( $this, 'add_meta_box_callback' ),
				$screen,
				'advanced',
				'default'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 * 
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_nonce_field( 'advanced_options_data', 'advanced_options_nonce' );
		$this->generate_fields( $post );
	}

	/**
	 * Hooks into WordPress' admin_footer function.
	 * Adds scripts for media uploader.
	 */
	public function admin_footer() {
		?><script>
			// https://codestag.com/how-to-use-wordpress-3-5-media-uploader-in-theme-options/
			jQuery(document).ready(function($){
				if ( typeof wp.media !== 'undefined' ) {
					var _custom_media = true,
					_orig_send_attachment = wp.media.editor.send.attachment;
					$('.rational-metabox-media').click(function(e) {
						var send_attachment_bkp = wp.media.editor.send.attachment;
						var button = $(this);
						var id = button.attr('id').replace('_button', '');
						_custom_media = true;
							wp.media.editor.send.attachment = function(props, attachment){
							if ( _custom_media ) {
								$("#"+id).val(attachment.url);
							} else {
								return _orig_send_attachment.apply( this, [props, attachment] );
							};
						}
						wp.media.editor.open(button);
						return false;
					});
					$('.add_media').on('click', function(){
						_custom_media = false;
					});
				}
			});
		</script><?php
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
			$db_value = get_post_meta( $post->ID, 'advanced_options_' . $field['id'], true );
			switch ( $field['type'] ) {
				case 'media':
					$input = sprintf(
						'<input class="regular-text" id="%s" name="%s" type="text" value="%s"> <input class="button rational-metabox-media" id="%s_button" name="%s_button" type="button" value="Upload" />',
						$field['id'],
						$field['id'],
						$db_value,
						$field['id'],
						$field['id']
					);
					break;
				default:
					$input = sprintf(
						'<input %s id="%s" name="%s" type="%s" value="%s">',
						$field['type'] !== 'color' ? 'class="regular-text"' : '',
						$field['id'],
						$field['id'],
						$field['type'],
						$db_value
					);
			}
			$output .= $this->row_format( $label, $input );
		}
		echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
	}

	/**
	 * Generates the HTML for table rows.
	 */
	public function row_format( $label, $input ) {
		return sprintf(
			'<tr><th scope="row">%s</th><td>%s</td></tr>',
			$label,
			$input
		);
	}
	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post( $post_id ) {
		if ( ! isset( $_POST['advanced_options_nonce'] ) )
			return $post_id;

		$nonce = $_POST['advanced_options_nonce'];
		if ( !wp_verify_nonce( $nonce, 'advanced_options_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				switch ( $field['type'] ) {
					case 'email':
						$_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
						break;
					case 'text':
						$_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
						break;
				}
				update_post_meta( $post_id, 'advanced_options_' . $field['id'], $_POST[ $field['id'] ] );
			} else if ( $field['type'] === 'checkbox' ) {
				update_post_meta( $post_id, 'advanced_options_' . $field['id'], '0' );
			}
		}
	}
}
new Rational_Meta_Box;
?>